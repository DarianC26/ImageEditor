/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package imageeditor;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.*;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author dari
 */
public class NewJFrame extends javax.swing.JFrame {

    private ImageIcon ii;
    private static BufferedImage bi;
    private static BufferedImage originalImg;
    private int hueSlider;
  
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hueSelectFrame = new javax.swing.JFrame();
        SliderPanel = new javax.swing.JPanel();
        HueSlider = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Brightness = new javax.swing.JButton();
        Darken = new javax.swing.JButton();
        Contrast = new javax.swing.JButton();
        Invert = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        Hue = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        greyScaleBtn = new javax.swing.JButton();
        loadImage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        ImagePanelContainer = new javax.swing.JPanel();
        ImagePanel = new javax.swing.JLabel();
        HistogramPanel = new javax.swing.JPanel();

        SliderPanel.setBackground(new java.awt.Color(225, 252, 255));

        HueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                HueSliderStateChanged(evt);
            }
        });

        javax.swing.GroupLayout SliderPanelLayout = new javax.swing.GroupLayout(SliderPanel);
        SliderPanel.setLayout(SliderPanelLayout);
        SliderPanelLayout.setHorizontalGroup(
            SliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SliderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(HueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addContainerGap())
        );
        SliderPanelLayout.setVerticalGroup(
            SliderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SliderPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(HueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );

        javax.swing.GroupLayout hueSelectFrameLayout = new javax.swing.GroupLayout(hueSelectFrame.getContentPane());
        hueSelectFrame.getContentPane().setLayout(hueSelectFrameLayout);
        hueSelectFrameLayout.setHorizontalGroup(
            hueSelectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SliderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hueSelectFrameLayout.setVerticalGroup(
            hueSelectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Brightness.setText("Brightness");
        Brightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrightnessActionPerformed(evt);
            }
        });

        Darken.setText("Darken");
        Darken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarkenActionPerformed(evt);
            }
        });

        Contrast.setText("Contrast");
        Contrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContrastActionPerformed(evt);
            }
        });

        Invert.setText("Invert");
        Invert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvertActionPerformed(evt);
            }
        });

        jButton7.setText("Add Filter");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        Hue.setText("Hue");
        Hue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HueActionPerformed(evt);
            }
        });

        jButton9.setText("jButton1");

        jButton10.setText("jButton1");

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        greyScaleBtn.setText("Grey Scale");
        greyScaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greyScaleBtnActionPerformed(evt);
            }
        });

        loadImage.setText("Load Image");
        loadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Image Editor");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(greyScaleBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Brightness, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Darken, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Contrast, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Invert, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Hue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Reset, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(loadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(loadImage)
                .addGap(18, 18, 18)
                .addComponent(greyScaleBtn)
                .addGap(18, 18, 18)
                .addComponent(Brightness)
                .addGap(18, 18, 18)
                .addComponent(Darken)
                .addGap(18, 18, 18)
                .addComponent(Contrast)
                .addGap(18, 18, 18)
                .addComponent(Invert)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(18, 18, 18)
                .addComponent(Hue)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton10)
                .addGap(18, 18, 18)
                .addComponent(Reset)
                .addGap(17, 17, 17))
        );

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        ImagePanelContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout ImagePanelContainerLayout = new javax.swing.GroupLayout(ImagePanelContainer);
        ImagePanelContainer.setLayout(ImagePanelContainerLayout);
        ImagePanelContainerLayout.setHorizontalGroup(
            ImagePanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImagePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
        );
        ImagePanelContainerLayout.setVerticalGroup(
            ImagePanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ImagePanelContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Image", ImagePanelContainer);

        HistogramPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout HistogramPanelLayout = new javax.swing.GroupLayout(HistogramPanel);
        HistogramPanel.setLayout(HistogramPanelLayout);
        HistogramPanelLayout.setHorizontalGroup(
            HistogramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
        HistogramPanelLayout.setVerticalGroup(
            HistogramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 485, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Histogram", HistogramPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 844, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 33, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 33, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void greyScaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greyScaleBtnActionPerformed
        // TODO add your handling code here:
        BufferedImage greyscaleImage = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = c.getRed();
                int g = c.getGreen();
                int b = c.getBlue();
                int a = c.getAlpha();
                
                int gr = (r + g + b) / 3;
                Color gColor = new Color(gr, gr, gr, a);
                greyscaleImage.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = greyscaleImage;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_greyScaleBtnActionPerformed

    private void loadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        final File f = chooser.getSelectedFile();
        if (f == null) {
            return;
        }

        SwingWorker sw = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                //simulate large image takes long to load
                ii = new ImageIcon(scaleImage(652, 485, ImageIO.read(new File(f.getAbsolutePath()))));
                return null;
            }

            @Override
            protected void done() { 
                super.done();
                ImagePanel.setIcon(ii);
            }
        };
        sw.execute();

    }//GEN-LAST:event_loadImageActionPerformed

    private void BrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrightnessActionPerformed
        // TODO add your handling code here:
        BufferedImage brightness = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = c.getRed() + 10;
                int g = c.getGreen() + 10;
                int b = c.getBlue() + 10;
                int a = c.getAlpha();

                if(r > 255) {
                    r = 255;
                }
                if(g > 255) {
                    g = 255;
                }
                if(b > 255) {
                    b = 255;
                }

                Color gColor = new Color(r, g, b, a);
                brightness.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = brightness;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_BrightnessActionPerformed
 
    private void DarkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarkenActionPerformed
        // TODO add your handling code here:
        BufferedImage darken = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = c.getRed() - 10;
                int g = c.getGreen() - 10;
                int b = c.getBlue() - 10;
                int a = c.getAlpha();

                if(r < 0) {
                    r = 0;
                }
                if(g < 0) {
                    g = 0;
                }
                if(b < 0) {
                    b = 0;
                }

                Color gColor = new Color(r, g, b, a);
                darken.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = darken;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_DarkenActionPerformed

    private void HueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HueActionPerformed
        // TODO add your handling code here:
        hueSelectFrame.setSize(475, 50);
        hueSelectFrame.setVisible(true);
    }//GEN-LAST:event_HueActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        bi = originalImg;
        ii = new ImageIcon(originalImg);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_ResetActionPerformed

    private void ContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContrastActionPerformed
        // TODO add your handling code here:
    BufferedImage imageAltered = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_RGB);
    int brightness = (int)(Math.random()*301) - 250; //values from 150 to 200
    double contrast = 1.5 + (5.0 - 1.5) * Math.random(); //values from 1.5 to 5.0

    for(int i = 0; i < bi.getWidth(); i++) {
        for(int j = 0; j < bi.getHeight(); j++) {
            Color c = new Color(bi.getRGB(i, j));
            int red = (int) contrast * c.getRed() + brightness;
            int green = (int) contrast * c.getGreen() + brightness;
            int blue = (int) contrast * c.getBlue() + brightness;

            if(red > 255) { // the values of the color components must be between 0-255
                red = 255;
            } else if(red < 0) {
                red = 0;
            }
            if(green > 255) {
                green = 255;
            } else if(green < 0) {
                green = 0;
            }
            if(blue > 255) {
                blue = 255;
            } else if(blue < 0) {
                blue = 0;
            }
            imageAltered.setRGB(i, j, new Color(red, green, blue).getRGB());
        }
    }
    bi = imageAltered;
    ii = new ImageIcon(bi);
    ImagePanel.setIcon(ii);
    }//GEN-LAST:event_ContrastActionPerformed

    private void InvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvertActionPerformed
        // TODO add your handling code here:
        BufferedImage invert = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = 255 - c.getRed();
                int g = 255 - c.getGreen();
                int b = 255 - c.getBlue();

                Color gColor = new Color(r, g, b, c.getAlpha());
                invert.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = invert;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_InvertActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void HueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_HueSliderStateChanged
        // TODO add your handling code here:
        hueSlider = HueSlider.getValue();
        BufferedImage hue = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i = 0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                   int rgb = bi.getRGB(i,j);
                   int r = (rgb >> 16) & 0xff;
                   int g = (rgb >> 8) & 0xff;
                   int b = (rgb) & 0xff;
                   float HSV[]=new float[3];
                   Color.RGBtoHSB(r,g,b,HSV);
                   hue.setRGB(i,j,Color.getHSBColor((hueSlider * 3.6f)/360.0f,HSV[1],HSV[2]).getRGB());
            }
        }
        bi = hue;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_HueSliderStateChanged

    /*
    public void createFrame(String action)
    {
        EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                if(action.equals("Brightness")) {
                    sliderText.setText("Set Brightness");
                }
                jFrame1.setSize(405,300);
                jFrame1.setResizable(false);
                jFrame1.setVisible(true);
            }
        });
    }
    */
    
    
    public static BufferedImage scaleImage(int w, int h, BufferedImage img) throws Exception {
        bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
        originalImg = bi;
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(img, 0, 0, w, h, null);
        g2d.dispose();
        return bi;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame NewJFrame = new NewJFrame();
                NewJFrame.setResizable(false);
                NewJFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Brightness;
    private javax.swing.JButton Contrast;
    private javax.swing.JButton Darken;
    private javax.swing.JPanel HistogramPanel;
    private javax.swing.JButton Hue;
    private javax.swing.JSlider HueSlider;
    private javax.swing.JLabel ImagePanel;
    private javax.swing.JPanel ImagePanelContainer;
    private javax.swing.JButton Invert;
    private javax.swing.JButton Reset;
    private javax.swing.JPanel SliderPanel;
    private javax.swing.JButton greyScaleBtn;
    private javax.swing.JFrame hueSelectFrame;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton loadImage;
    // End of variables declaration//GEN-END:variables
}
