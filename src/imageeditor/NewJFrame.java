/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package imageeditor;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.*;
import javax.swing.colorchooser.ColorSelectionModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author dari
 */
public class NewJFrame extends javax.swing.JFrame {

    private ImageIcon ii;
    private static BufferedImage bi;
    private static BufferedImage currentImg;
    private static BufferedImage originalImg;
    private int originalHeight;
    private int originalWidth;
    private int hueSlider;
    private Color colorSelected;
  
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorFilterFrame = new javax.swing.JFrame();
        colorSelector = new javax.swing.JColorChooser();
        saveFilter = new javax.swing.JButton();
        hueSelectFrame = new javax.swing.JFrame();
        jPanel3 = new javax.swing.JPanel();
        HueSlider = new javax.swing.JSlider();
        saveHue = new javax.swing.JButton();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Brightness = new javax.swing.JButton();
        Darken = new javax.swing.JButton();
        Contrast = new javax.swing.JButton();
        Invert = new javax.swing.JButton();
        colorFilter = new javax.swing.JButton();
        Hue = new javax.swing.JButton();
        sharpen = new javax.swing.JButton();
        vertFlip = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        greyScaleBtn = new javax.swing.JButton();
        loadImage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        flipHori = new javax.swing.JButton();
        saveImage = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        ImagePanelContainer = new javax.swing.JPanel();
        ImagePanel = new javax.swing.JLabel();
        HistogramPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        colorFilterFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                colorFilterFrameWindowClosing(evt);
            }
        });

        saveFilter.setText("Save");
        saveFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout colorFilterFrameLayout = new javax.swing.GroupLayout(colorFilterFrame.getContentPane());
        colorFilterFrame.getContentPane().setLayout(colorFilterFrameLayout);
        colorFilterFrameLayout.setHorizontalGroup(
            colorFilterFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorFilterFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, colorFilterFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveFilter)
                .addContainerGap())
        );
        colorFilterFrameLayout.setVerticalGroup(
            colorFilterFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(colorFilterFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveFilter)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        hueSelectFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                hueSelectFrameWindowClosing(evt);
            }
        });

        HueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                HueSliderStateChanged(evt);
            }
        });

        saveHue.setText("Save");
        saveHue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveHueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveHue)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(HueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(saveHue)
                .addContainerGap())
        );

        javax.swing.GroupLayout hueSelectFrameLayout = new javax.swing.GroupLayout(hueSelectFrame.getContentPane());
        hueSelectFrame.getContentPane().setLayout(hueSelectFrameLayout);
        hueSelectFrameLayout.setHorizontalGroup(
            hueSelectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hueSelectFrameLayout.setVerticalGroup(
            hueSelectFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Brightness.setText("Brightness");
        Brightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrightnessActionPerformed(evt);
            }
        });

        Darken.setText("Darken");
        Darken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarkenActionPerformed(evt);
            }
        });

        Contrast.setText("Contrast");
        Contrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContrastActionPerformed(evt);
            }
        });

        Invert.setText("Invert");
        Invert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvertActionPerformed(evt);
            }
        });

        colorFilter.setText("Color Filter");
        colorFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorFilterActionPerformed(evt);
            }
        });

        Hue.setText("Hue");
        Hue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HueActionPerformed(evt);
            }
        });

        sharpen.setText("Sharpen");
        sharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenActionPerformed(evt);
            }
        });

        vertFlip.setText("Flip Vertical");
        vertFlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vertFlipActionPerformed(evt);
            }
        });

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        greyScaleBtn.setText("Grey Scale");
        greyScaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greyScaleBtnActionPerformed(evt);
            }
        });

        loadImage.setText("Load Image");
        loadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Myanmar MN", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Image Editor");

        flipHori.setText("Flip Horizontal");
        flipHori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipHoriActionPerformed(evt);
            }
        });

        saveImage.setText("Save Image");
        saveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(greyScaleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Brightness, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Darken, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Contrast, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Invert, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(colorFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Hue, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(sharpen, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(loadImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vertFlip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(flipHori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadImage)
                .addGap(18, 18, 18)
                .addComponent(greyScaleBtn)
                .addGap(18, 18, 18)
                .addComponent(Brightness)
                .addGap(18, 18, 18)
                .addComponent(Darken)
                .addGap(18, 18, 18)
                .addComponent(Contrast)
                .addGap(18, 18, 18)
                .addComponent(Invert)
                .addGap(18, 18, 18)
                .addComponent(colorFilter)
                .addGap(18, 18, 18)
                .addComponent(Hue)
                .addGap(18, 18, 18)
                .addComponent(sharpen)
                .addGap(18, 18, 18)
                .addComponent(vertFlip)
                .addGap(18, 18, 18)
                .addComponent(flipHori)
                .addGap(18, 18, 18)
                .addComponent(saveImage)
                .addGap(18, 18, 18)
                .addComponent(Reset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        ImagePanelContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout ImagePanelContainerLayout = new javax.swing.GroupLayout(ImagePanelContainer);
        ImagePanelContainer.setLayout(ImagePanelContainerLayout);
        ImagePanelContainerLayout.setHorizontalGroup(
            ImagePanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
        );
        ImagePanelContainerLayout.setVerticalGroup(
            ImagePanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Image", ImagePanelContainer);

        HistogramPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout HistogramPanelLayout = new javax.swing.GroupLayout(HistogramPanel);
        HistogramPanel.setLayout(HistogramPanelLayout);
        HistogramPanelLayout.setHorizontalGroup(
            HistogramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
        HistogramPanelLayout.setVerticalGroup(
            HistogramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 576, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Histogram", HistogramPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel4.setBackground(new java.awt.Color(0, 51, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 153)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void saveFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFilterActionPerformed
        // TODO add your handling code here:
        bi = currentImg;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
        colorFilterFrame.dispose();
    }//GEN-LAST:event_saveFilterActionPerformed

    private void colorFilterFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_colorFilterFrameWindowClosing
        // TODO add your handling code here:
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_colorFilterFrameWindowClosing

    private void HueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_HueSliderStateChanged
        // TODO add your handling code here:
        hueSlider = HueSlider.getValue();
        BufferedImage hue = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i = 0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                int rgb = bi.getRGB(i,j);
                int r = (rgb >> 16) & 0xff;
                int g = (rgb >> 8) & 0xff;
                int b = (rgb) & 0xff;
                float HSV[]=new float[3];
                Color.RGBtoHSB(r,g,b,HSV);
                hue.setRGB(i,j,Color.getHSBColor((hueSlider * 3.6f)/360.0f,HSV[1],HSV[2]).getRGB());
            }
        }
        currentImg = hue;
        ii = new ImageIcon(currentImg);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_HueSliderStateChanged

    private void loadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setPreferredSize(new Dimension(600, 400));
        chooser.showOpenDialog(null);
        final File f = chooser.getSelectedFile();
        if (f == null) {
            return;
        }

        SwingWorker sw = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                originalImg = ImageIO.read(new File(f.getAbsolutePath()));
                originalHeight = originalImg.getHeight();
                originalWidth = originalImg.getWidth();
                //simulate large image takes long to load
                ii = new ImageIcon(scaleImage(652, 600, ImageIO.read(new File(f.getAbsolutePath()))));
                return null;
            }

            @Override
            protected void done() {
                super.done();
                ImagePanel.setIcon(ii);
            }
        };
        sw.execute();
    }//GEN-LAST:event_loadImageActionPerformed

    private void greyScaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greyScaleBtnActionPerformed
        // TODO add your handling code here:
        BufferedImage greyscaleImage = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = c.getRed();
                int g = c.getGreen();
                int b = c.getBlue();
                int a = c.getAlpha();

                int gr = (r + g + b) / 3;
                Color gColor = new Color(gr, gr, gr, a);
                greyscaleImage.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = greyscaleImage;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_greyScaleBtnActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        bi = originalImg;
        try {
            ii = new ImageIcon(scaleImage(652, 600, bi));
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_ResetActionPerformed

    private void HueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HueActionPerformed
        // TODO add your handling code here:
        hueSelectFrame.setSize(400, 125);
        hueSelectFrame.setVisible(true);
    }//GEN-LAST:event_HueActionPerformed

    private void colorFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorFilterActionPerformed
        // TODO add your handling code here:
        //660 355
        BufferedImage filter = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        ColorSelectionModel model = colorSelector.getSelectionModel();
        ChangeListener changeListener = new ChangeListener() {
            public void stateChanged(ChangeEvent changeEvent) {
                colorSelected = colorSelector.getColor();
                for(int i = 0; i < bi.getWidth(); i++) {
                    for(int j = 0; j < bi.getHeight(); j++) {
                        int pixel = bi.getRGB(i, j) & colorSelected.getRGB();
                        filter.setRGB(i, j, pixel);
                    }
                }
                currentImg = filter;
                ii = new ImageIcon(currentImg);
                ImagePanel.setIcon(ii);
            }
        };
        model.addChangeListener(changeListener);
        colorFilterFrame.setSize(660, 500);
        colorFilterFrame.setVisible(true);
    }//GEN-LAST:event_colorFilterActionPerformed

    private void InvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvertActionPerformed
        // TODO add your handling code here:
        BufferedImage invert = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = 255 - c.getRed();
                int g = 255 - c.getGreen();
                int b = 255 - c.getBlue();

                Color gColor = new Color(r, g, b, c.getAlpha());
                invert.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = invert;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_InvertActionPerformed

    private void ContrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContrastActionPerformed
        // TODO add your handling code here:
        BufferedImage imageAltered = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_RGB);
        int brightness = (int)(Math.random()*301) - 250; //values from 150 to 200
        double contrast = 1.5 + (5.0 - 1.5) * Math.random(); //values from 1.5 to 5.0

        for(int i = 0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i, j));
                int r = (int) contrast * c.getRed() + brightness;
                int g = (int) contrast * c.getGreen() + brightness;
                int b = (int) contrast * c.getBlue() + brightness;

                if(r > 255) { // the values of the color components must be between 0-255
                    r = 255;
                } else if(r < 0) {
                    r = 0;
                }
                if(g > 255) {
                    g = 255;
                } else if(g < 0) {
                    g = 0;
                }
                if(b > 255) {
                    b = 255;
                } else if(b < 0) {
                    b = 0;
                }
                imageAltered.setRGB(i, j, new Color(r, g, b).getRGB());
            }
        }
        bi = imageAltered;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_ContrastActionPerformed

    private void DarkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarkenActionPerformed
        // TODO add your handling code here:
        BufferedImage darken = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = c.getRed() - 10;
                int g = c.getGreen() - 10;
                int b = c.getBlue() - 10;
                int a = c.getAlpha();

                if(r < 0) {
                    r = 0;
                }
                if(g < 0) {
                    g = 0;
                }
                if(b < 0) {
                    b = 0;
                }

                Color gColor = new Color(r, g, b, a);
                darken.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = darken;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_DarkenActionPerformed

    private void BrightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrightnessActionPerformed
        // TODO add your handling code here:
        BufferedImage brightness = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                int r = c.getRed() + 10;
                int g = c.getGreen() + 10;
                int b = c.getBlue() + 10;
                int a = c.getAlpha();

                if(r > 255) {
                    r = 255;
                }
                if(g > 255) {
                    g = 255;
                }
                if(b > 255) {
                    b = 255;
                }

                Color gColor = new Color(r, g, b, a);
                brightness.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = brightness;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_BrightnessActionPerformed

    private void sharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenActionPerformed
        // TODO add your handling code here:
        BufferedImage sharpen = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        for(int i = 1; i < bi.getWidth(); i++) {
            for(int j = 1; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                Color prevC = new Color(bi.getRGB(i - 1,j - 1));
                int r = (int) (c.getRed() + 0.5 * (c.getRed() - prevC.getRed()));
                int g = (int) (c.getGreen() + 0.5 * (c.getGreen() - prevC.getBlue()));
                int b = (int) (c.getBlue() + 0.5 * (c.getBlue() - prevC.getBlue()));

                if(r > 255) {
                    r = 255;
                } else if(r < 0) {
                    r = 0;
                }
                if(g > 255) {
                    g = 255;
                } else if(g < 0) {
                    g = 0;
                }
                if(b > 255) {
                    b = 255;
                } else if(b < 0) {
                    b = 0;
                }

                Color gColor = new Color(r, g, b, c.getAlpha());
                sharpen.setRGB(i, j, gColor.getRGB());
            }
        }
        bi = sharpen;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_sharpenActionPerformed

    private void saveHueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveHueActionPerformed
        // TODO add your handling code here:
        bi = currentImg;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
        hueSelectFrame.dispose();
    }//GEN-LAST:event_saveHueActionPerformed

    private void hueSelectFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_hueSelectFrameWindowClosing
        // TODO add your handling code here:                                               
        // TODO add your handling code here:
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_hueSelectFrameWindowClosing

    private void vertFlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vertFlipActionPerformed
        // TODO add your handling code here:
        BufferedImage vert = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        int height = bi.getHeight() - 1;
        for(int i =0; i < bi.getWidth(); i++) {
            for(int j = 0; j < bi.getHeight()/2; j++) {
                Color c = new Color(bi.getRGB(i,j));
                Color opposite = new Color(bi.getRGB(i, height - j));
                
                vert.setRGB(i, j, opposite.getRGB());
                vert.setRGB(i, height - j, c.getRGB());
            }
        }
        bi = vert;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_vertFlipActionPerformed

    private void saveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageActionPerformed

    }//GEN-LAST:event_saveImageActionPerformed

    private void flipHoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipHoriActionPerformed
        // TODO add your handling code here:
        BufferedImage hori = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_ARGB);
        int width = bi.getWidth() - 1;
        for(int i =0; i < bi.getWidth()/2; i++) {
            for(int j = 0; j < bi.getHeight(); j++) {
                Color c = new Color(bi.getRGB(i,j));
                Color opposite = new Color(bi.getRGB(i, width - j));
                
                hori.setRGB(i, j, opposite.getRGB());
                hori.setRGB(i, width - j, c.getRGB());
            }
        }
        bi = hori;
        ii = new ImageIcon(bi);
        ImagePanel.setIcon(ii);
    }//GEN-LAST:event_flipHoriActionPerformed

    /*
    public void createFrame(String action)
    {
        EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                if(action.equals("Brightness")) {
                    sliderText.setText("Set Brightness");
                }
                jFrame1.setSize(405,300);
                jFrame1.setResizable(false);
                jFrame1.setVisible(true);
            }
        });
    }
    */
    
    
    public static BufferedImage scaleImage(int w, int h, BufferedImage img) throws Exception {
        bi = new BufferedImage(w, h, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(img, 0, 0, w, h, null);
        g2d.dispose();
        return bi;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame NewJFrame = new NewJFrame();
                NewJFrame.setResizable(false);
                NewJFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Brightness;
    private javax.swing.JButton Contrast;
    private javax.swing.JButton Darken;
    private javax.swing.JPanel HistogramPanel;
    private javax.swing.JButton Hue;
    private javax.swing.JSlider HueSlider;
    private javax.swing.JLabel ImagePanel;
    private javax.swing.JPanel ImagePanelContainer;
    private javax.swing.JButton Invert;
    private javax.swing.JButton Reset;
    private javax.swing.JButton colorFilter;
    private javax.swing.JFrame colorFilterFrame;
    private javax.swing.JColorChooser colorSelector;
    private javax.swing.JButton flipHori;
    private javax.swing.JButton greyScaleBtn;
    private javax.swing.JFrame hueSelectFrame;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton loadImage;
    private javax.swing.JButton saveFilter;
    private javax.swing.JButton saveHue;
    private javax.swing.JButton saveImage;
    private javax.swing.JButton sharpen;
    private javax.swing.JButton vertFlip;
    // End of variables declaration//GEN-END:variables
}
